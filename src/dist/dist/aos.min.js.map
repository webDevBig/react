{"version":3,"sources":["aos.js"],"names":["$aosElements","initialized","delay","easing","duration","disable","once","startEvent","throttleDelay","debounceDelay","disableMutationObserver","refresh","arguments","length","undefined","prepare","options","handleScroll","elements","forEach","el","i","node","removeAttribute","isDisabled","optionDisable","detect","mobile","phone","tablet","settings","Object","assign","browserNotSupported","document","all","window","atob","querySelector","setAttribute","addEventListener","readyState","debounce","throttle","observe","refreshHard","module","exports","init"],"mappings":"aA0BA,IAAAA,aAAA,GAFIC,aAAc,EAOhBC,QAFY,CAGZC,OAAQ,IACRC,MAAAA,EACAC,OAAO,OACPC,SAAM,IACNC,SAAAA,EACAC,MAAAA,EACAC,WAAAA,mBACAC,cAAAA,GAVFD,cAAA,GAaAC,yBAAA,GAIEC,QAAA,SAAA,GAIE,GAJF,EAAAC,UAAAC,aAAAC,IAAA,GAAA,IACgBb,aAAc,GAG5BA,YALJ,OAMID,aAAee,QAAQf,aAAcgB,SAIrCC,aAAOjB,aAAPgB,QAAAV,MAVJN,cAmBEA,YAAekB,WACfP,aAAOO,WAFTP,WASMN,QAAU,WACdL,aAAamB,QAAQ,SAAAC,EAAAC,GACnBD,EAAGE,KAAKC,gBAAgB,YACxBH,EAAGE,KAAKC,gBAAgB,mBACxBH,EAAGE,KAAKC,gBAAgB,qBACxBH,EAAGE,KAAKC,gBAAgB,qBAQtBC,WAAa,SAAbA,GACJ,OAAyB,IAAlBC,GADT,WAAAA,GAAAC,OAAAC,UAQA,UAAAF,GAAAC,OAAAE,SAJqB,WAAlBH,GAA8BC,OAAOG,UACZ,mBAAlBJ,IAAoD,IAApBA,KAgBxCzB,KAAAA,SAAA8B,GAGAd,QAAAe,OAAAC,OAAAhB,QAAAc,GAGA9B,aAAAkB,WAFA,IAAMe,EAAsBC,SAASC,MAAQC,OAAOC,KAMpD,OAAIb,WAAWR,QAAQX,UAAY4B,EAC1B5B,WAOT6B,SAASI,cAAc,QAAQC,aAAa,kBAAmBvB,QAAQb,QACvE+B,SAASI,cAAc,QAAQC,aAAa,oBAAqBvB,QAAQZ,UACzE8B,SAASI,cAAc,QAAQC,aAAa,iBAAkBvB,QAAQd,OAUpE,qBAAAc,QAAAT,aACuD,EAAvD6B,CAAAA,WAAOI,eAAiBxB,QAAQT,SAAYkC,YAE3C9B,SAFD,GAGK,SAAAK,QAAAT,WAEL2B,OAAAA,iBAASM,QAAiBxB,WAA1B,WACEL,SAAQ,KADVuB,SAASM,iBAAiBxB,QAAQT,WAAY,WAC5CI,SAAQ,KAOZyB,OAAOI,iBAAiB,SAAUE,SAAS/B,QAASK,QAAQP,eAAe,IAC3E2B,OAAOI,iBAAiB,oBAAqBE,SAAS/B,QAASK,QAAQP,eAAe,IAKtF2B,OAAOI,iBAAiB,SAAUG,SAAS,WACzC1B,aAAajB,aAAcgB,QAAQV,OAClCU,QAAQR,gBAWXQ,QAAOhB,yBAnET4C,QAAA,aAAAC,aAmES7C,eAOQ8C,OAAjBC,QAAA,CACEC,KAAAA,KACArC,QAAAA,QACAkC,YAAAA","file":"aos.min.js","sourcesContent":["/**\n * *******************************************************\n * AOS (Animate on scroll) - wowjs alternative\n * made to animate elements on scroll in both directions\n * *******************************************************\n */\n\n// import styles from './../sass/aos.scss';\n\n// // Modules & helpers\n// import throttle from 'lodash.throttle';\n// import debounce from 'lodash.debounce';\n\n// import observe from './libs/observer';\n\n// import detect from './helpers/detector';\n// import handleScroll from './helpers/handleScroll';\n// import prepare from './helpers/prepare';\n// import elements from './helpers/elements';\n\n/**\n * Private variables\n */\nlet $aosElements = [];\nlet initialized = false;\n\n/**\n * Default options\n */\nlet options = {\n  offset: 120,\n  delay: 0,\n  easing: 'ease',\n  duration: 400,\n  disable: false,\n  once: false,\n  startEvent: 'DOMContentLoaded',\n  throttleDelay: 99,\n  debounceDelay: 50,\n  disableMutationObserver: false,\n};\n\n/**\n * Refresh AOS\n */\nconst refresh = function refresh(initialize = false) {\n  // Allow refresh only when it was first initialized on startEvent\n  if (initialize) initialized = true;\n\n  if (initialized) {\n    // Extend elements objects in $aosElements with their positions\n    $aosElements = prepare($aosElements, options);\n    // Perform scroll event, to refresh view and show/hide elements\n    handleScroll($aosElements, options.once);\n\n    return $aosElements;\n  }\n};\n\n/**\n * Hard refresh\n * create array with new elements and trigger refresh\n */\nconst refreshHard = function refreshHard() {\n  $aosElements = elements();\n  refresh();\n};\n\n/**\n * Disable AOS\n * Remove all attributes to reset applied styles\n */\nconst disable = function() {\n  $aosElements.forEach(function(el, i) {\n    el.node.removeAttribute('data-aos');\n    el.node.removeAttribute('data-aos-easing');\n    el.node.removeAttribute('data-aos-duration');\n    el.node.removeAttribute('data-aos-delay');\n  });\n};\n\n\n/**\n * Check if AOS should be disabled based on provided setting\n */\nconst isDisabled = function(optionDisable) {\n  return optionDisable === true ||\n  (optionDisable === 'mobile' && detect.mobile()) ||\n  (optionDisable === 'phone' && detect.phone()) ||\n  (optionDisable === 'tablet' && detect.tablet()) ||\n  (typeof optionDisable === 'function' && optionDisable() === true);\n};\n\n/**\n * Initializing AOS\n * - Create options merging defaults with user defined options\n * - Set attributes on <body> as global setting - css relies on it\n * - Attach preparing elements to options.startEvent,\n *   window resize and orientation change\n * - Attach function that handle scroll and everything connected to it\n *   to window scroll event and fire once document is ready to set initial state\n */\nconst init = function init(settings) {\n  options = Object.assign(options, settings);\n\n  // Create initial array with elements -> to be fullfilled later with prepare()\n  $aosElements = elements();\n\n  // Detect not supported browsers (<=IE9)\n  // http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n  const browserNotSupported = document.all && !window.atob;\n\n  /**\n   * Don't init plugin if option `disable` is set\n   * or when browser is not supported\n   */\n  if (isDisabled(options.disable) || browserNotSupported) {\n    return disable();\n  }\n\n  /**\n   * Set global settings on body, based on options\n   * so CSS can use it\n   */\n  document.querySelector('body').setAttribute('data-aos-easing', options.easing);\n  document.querySelector('body').setAttribute('data-aos-duration', options.duration);\n  document.querySelector('body').setAttribute('data-aos-delay', options.delay);\n\n  /**\n   * Handle initializing\n   */\n  if (options.startEvent === 'DOMContentLoaded' &&\n    ['complete', 'interactive'].indexOf(document.readyState) > -1) {\n    // Initialize AOS if default startEvent was already fired\n    refresh(true);\n  } else if (options.startEvent === 'load') {\n    // If start event is 'Load' - attach listener to window\n    window.addEventListener(options.startEvent, function() {\n      refresh(true);\n    });\n  } else {\n    // Listen to options.startEvent and initialize AOS\n    document.addEventListener(options.startEvent, function() {\n      refresh(true);\n    });\n  }\n\n  /**\n   * Refresh plugin on window resize or orientation change\n   */\n  window.addEventListener('resize', debounce(refresh, options.debounceDelay, true));\n  window.addEventListener('orientationchange', debounce(refresh, options.debounceDelay, true));\n\n  /**\n   * Handle scroll event to animate elements on scroll\n   */\n  window.addEventListener('scroll', throttle(() => {\n    handleScroll($aosElements, options.once);\n  }, options.throttleDelay));\n\n  /**\n   * Observe [aos] elements\n   * If something is loaded by AJAX\n   * it'll refresh plugin automatically\n   */\n  if (!options.disableMutationObserver) {\n    observe('[data-aos]', refreshHard);\n  }\n\n  return $aosElements;\n};\n\n/**\n * Export Public API\n */\n\nmodule.exports = {\n  init,\n  refresh,\n  refreshHard\n};\n"]}